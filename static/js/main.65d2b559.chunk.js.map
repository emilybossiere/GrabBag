{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","devices","bag","objectKeys","tempKeys","onChange","e","value","target","_this","setState","search","url","concat","fetch","then","results","json","data","addDevice","deviceTitle","array","Array","from","indexOf","push","localStorage","setItem","JSON","stringify","removeDevice","prevState","filter","d","removedDeviceArray","parse","getItem","splice","removeAll","clearedArray","makeMenuLayer","layer","layerKeys","Object","entries","map","_ref","_ref2","slicedToArray","key","arrow","keys","length","react_default","a","createElement","className","style","cursor","color","plus","onClick","handleShowMore","objectSpread","defineProperty","initializeTempKeys","_ref3","_ref4","newTempKeys","initializeObjectKeys","tempObject","forEach","tempKey","_this2","this","axios","get","response","categories","_this3","align","src","alt","type","placeholder","device","title","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65d2b559.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./styles/styles.scss\";\n\nclass App extends React.Component {\n  state = {\n    devices: [],\n    bag: [],\n    objectKeys: null,\n    tempKeys: []\n  };\n\n  //take in search value\n  onChange = e => {\n    const { value } = e.target;\n    this.setState({\n      search: value\n    });\n\n    this.search(value);\n  };\n\n  //search for typed query\n  search = search => {\n    const url = `https://www.ifixit.com/api/2.0/suggest/${search}?doctypes=device`;\n    fetch(url)\n      .then(results => results.json())\n      .then(data => {\n        this.setState({ devices: data.results });\n      });\n  };\n\n  //add selected device to bag\n  addDevice = (e, deviceTitle) => {\n    const array = Array.from(this.state.bag || []);\n    //only add if item is not already in bag\n    if (array.indexOf(deviceTitle) === -1) {\n      array.push(deviceTitle);\n    } else {\n      return;\n    }\n    localStorage.setItem(\"list\", JSON.stringify(array));\n    this.setState({\n      bag: array\n    });\n  };\n\n  //remove selected device from bag\n  removeDevice = (e, deviceTitle) => {\n    this.setState(prevState => ({\n      bag: prevState.bag.filter(d => d !== deviceTitle)\n    }));\n\n    let removedDeviceArray = JSON.parse(localStorage.getItem(\"list\"));\n    removedDeviceArray.splice(removedDeviceArray.indexOf(deviceTitle), 1);\n    localStorage.setItem(\"list\", JSON.stringify(removedDeviceArray));\n  };\n\n  //clear contents of bag\n  removeAll = e => {\n    this.setState({\n      bag: []\n    });\n\n    let clearedArray = JSON.parse(localStorage.getItem(\"list\"));\n    clearedArray = [];\n    localStorage.setItem(\"list\", JSON.stringify(clearedArray));\n  };\n\n  //create the next layer of nested menu recursively\n  makeMenuLayer = layer => {\n    const { objectKeys } = this.state;\n    if (layer == null) {\n      //used to fix null object error\n      return null;\n    }\n    const layerKeys = Object.entries(layer).map(([key, value]) => {\n      //if object has children, display arrow icon, else do nothing\n      var arrow = Object.keys(value).length ? (\n        <i\n          className=\"fas fa-angle-right\"\n          style={{ cursor: \"pointer\", color: \"gray\" }}\n        />\n      ) : (\n        \"\"\n      );\n      //if object doesn't have children, display + icon, else do nothing\n      var plus =\n        Object.keys(value).length === 0 ? (\n          <i\n            className=\"fas fa-plus plus\"\n            style={{ cursor: \"pointer\" }}\n            onClick={e => this.addDevice(e, key)}\n          />\n        ) : (\n          \"\"\n        );\n      return (\n        <ul className=\"menu-items\" key={key}>\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => this.handleShowMore(key)}\n          >\n            {key} {arrow} {plus}\n          </div>\n\n          {objectKeys[key] && this.makeMenuLayer(value)}\n        </ul>\n      );\n    });\n    return <div>{layerKeys}</div>;\n  };\n\n  handleShowMore = key => {\n    this.setState(prevState => ({\n      objectKeys: {\n        ...prevState.objectKeys,\n        [key]: !this.state.objectKeys[key]\n      }\n    }));\n  };\n\n  initializeTempKeys = layer => {\n    if (layer == null) {\n      return null;\n    }\n    // eslint-disable-next-line\n    Object.entries(layer).map(([key, value]) => {\n      const newTempKeys = this.state.tempKeys;\n      newTempKeys.push(key);\n      this.setState({ tempKeys: newTempKeys });\n      this.initializeTempKeys(value);\n    });\n  };\n\n  initializeObjectKeys = () => {\n    const { tempKeys } = this.state;\n    let tempObject = {};\n    tempKeys.forEach(tempKey => {\n      tempObject[tempKey] = true;\n    });\n\n    this.setState({ objectKeys: tempObject });\n  };\n\n  componentDidMount() {\n    this.search(\"\");\n    const storedList = JSON.parse(localStorage.getItem(\"list\"));\n    const bag = storedList;\n    this.setState({ bag });\n\n    //api call to categories for menu\n    axios.get(\"https://www.ifixit.com/api/2.0/categories\").then(response => {\n      this.setState({ categories: response.data });\n    });\n    const { categories } = this.state;\n    this.initializeTempKeys(categories);\n    this.initializeObjectKeys();\n    this.setState({ categories });\n  }\n\n  render() {\n    return (\n      <div className=\"text\">\n        {/*header containing logo & title */}\n        <header className=\"header\">\n          <img\n            className=\"header-img\"\n            align=\"left\"\n            src={\"ifixit-logo.png\"}\n            alt=\"Logo\"\n          />\n          GRAB BAG\n        </header>\n\n        {/* div for search bar, menu, and bag */}\n        <div className=\"flex-container\">\n          <h3>Search for a device...</h3>\n\n          {/* bag and remove all button */}\n          <h3 className=\"your-bag\">\n            <span className=\"bag-title\">Your Bag</span>\n            <button className=\"btn button\" onClick={e => this.removeAll(e)}>\n              Remove all\n            </button>\n          </h3>\n        </div>\n\n        <div className=\"flex-container\">\n          <form>\n            <input\n              className=\"rounded search\"\n              type=\"text\"\n              placeholder=\"Search\"\n              onChange={this.onChange}\n            />\n            {/* add devices from search bar */}\n            <div>\n              {(this.state.devices || []).map(device => (\n                // eslint-disable-next-line\n                <a key={device.title}>\n                  <li>\n                    {device.title}{\" \"}\n                    <i\n                      className=\"fas fa-plus plus input\"\n                      style={{ cursor: \"pointer\" }}\n                      onClick={e => this.addDevice(e, device.title)}\n                    />\n                  </li>\n                </a>\n              ))}\n              {/* create menu using categories */}\n              <h4>Or browse from the menu...</h4>\n              <div className=\"menu\">\n                {this.makeMenuLayer(this.state.categories)}\n              </div>\n            </div>\n          </form>\n          {/* populated/unpopulated bag and single device removal */}\n          <div className=\"bag\">\n            <div>\n              {(this.state.bag || []).map(device => (\n                <p key={device}>\n                  {device}\n                  <i\n                    className=\"fas fa-times ex\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={e => this.removeDevice(e, device)}\n                  />\n                </p>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n//import Menu from \"./components/Menu\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}